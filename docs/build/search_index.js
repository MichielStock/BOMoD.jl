var documenterSearchIndex = {"docs":
[{"location":"man/Designspace/#Some-Key-concepts-1","page":"-","title":"Some Key concepts","text":"","category":"section"},{"location":"man/Designspace/#","page":"-","title":"-","text":"Start of Combinatorial problem terms need to be clarified","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"A module: A single element with no given features\nA Construct:  Made from combinations of modules.\nA constrain: A specific combination of elements that isn't allowed in the construct.\nA Space:: A container that contains all constructs that can be made form the given modules. Generally, a Space explicitly calculated and all allow constructs are made. In special case generation of all construct isn't required.","category":"page"},{"location":"man/Designspace/#Set-up-the-design-space:-1","page":"-","title":"Set up the design space:","text":"","category":"section"},{"location":"man/Designspace/#Single-moduels-1","page":"-","title":"Single moduels","text":"","category":"section"},{"location":"man/Designspace/#","page":"-","title":"-","text":"A single module can is introduced as. Currentely modules are type String or type Symbol","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"    md_Symbol = Mod(:sym4)\r\n    md_String = Mod(\"a\")","category":"page"},{"location":"man/Designspace/#Group-modules-1","page":"-","title":"Group modules","text":"","category":"section"},{"location":"man/Designspace/#","page":"-","title":"-","text":"Multiple modules are needed to make a constructs and can be grouped. T Modules can be a group in different ways, all result should be equal.","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"Group modules of an array of  julia  md_group = Group_Mod([Mod(\"a\"),Mod(\"b\"),Mod(\"c\"),Mod(\"d\"),Mod(\"e\")])\nsum different modules  julia  md_group2 = Mod(\"a\") + Mod(\"b\") + Mod(\"c\") + Mod(\"d\") + Mod(\"e\")\ngroup module function: Array{T} where T is an Symbol or String","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"    md_group3 = group_mod([\"a\", \"b\", \"c\", \"d\",\"e\"])\r\n    ```\r\nAddionally the grouped modules are ordered to have reproducible results and Duplicated modules are removed. As example:\r\n","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"julia mdgroup4 = groupmod([\"b\", \"c\", \"a\", \"d\",\"e\",\"e\"])","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"All the above code will result in the same Groupstructurde","category":"page"},{"location":"man/Designspace/#","page":"-","title":"-","text":"@example mdgroup4 = groupmod([\"b\", \"c\", \"a\", \"d\",\"e\",\"e\"]) mdgroup = groupmod([\"a\", \"b\", \"c\", \"d\",\"e\"]) ```","category":"page"},{"location":"#BOMoD.jl-1","page":"BOMoD.jl","title":"BOMoD.jl","text":"","category":"section"},{"location":"#","page":"BOMoD.jl","title":"BOMoD.jl","text":"package for Bayesian optimisation for modular designs","category":"page"},{"location":"#","page":"BOMoD.jl","title":"BOMoD.jl","text":"julia using BOMoD","category":"page"},{"location":"man/low_level/#Low-level-interface-1","page":"Low level interface","title":"Low level interface","text":"","category":"section"},{"location":"man/low_level/#","page":"Low level interface","title":"Low level interface","text":"","category":"page"}]
}
